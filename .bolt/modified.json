[["/home/project/src/components/ui/dropdown-menu.tsx","import * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport {\n  CheckIcon,\n  ChevronRightIcon,\n  DotFilledIcon,\n} from '@radix-ui/react-icons';\n\nimport { cn } from '@/lib/utils';\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <DotFilledIcon className=\"h-4 w-4 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      'px-2 py-1.5 text-sm font-semibold',\n      inset && 'pl-8',\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n"],["/home/project/src/pages/PromptTemplates.tsx","import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { PlusCircle, Search, Tag } from 'lucide-react';\nimport { supabase } from '@/db';\n\ninterface PromptTemplate {\n  id: string;\n  title: string;\n  content: string;\n  description: string;\n  category: string;\n  tags: string[];\n  isPublic: boolean;\n  version: number;\n  rating: number;\n  usageCount: number;\n}\n\nexport default function PromptTemplates() {\n  const [templates, setTemplates] = useState<PromptTemplate[]>([]);\n  const [newTemplate, setNewTemplate] = useState<Omit<PromptTemplate, 'id' | 'rating' | 'usageCount'>>({\n    title: '',\n    content: '',\n    description: '',\n    category: '',\n    tags: [],\n    isPublic: false,\n    version: 1,\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n\n  useEffect(() => {\n    fetchTemplates();\n  }, []);\n\n  const fetchTemplates = async () => {\n    const { data, error } = await supabase.from('prompt_templates').select('*');\n    if (error) {\n      console.error('Error fetching templates:', error);\n    } else {\n      setTemplates(data || []);\n    }\n  };\n\n  const handleCreateTemplate = async () => {\n    const { data, error } = await supabase.from('prompt_templates').insert([newTemplate]).select();\n    if (error) {\n      console.error('Error creating template:', error);\n    } else {\n      setNewTemplate({ title: '', content: '', description: '', category: '', tags: [], isPublic: false, version: 1 });\n      fetchTemplates();\n    }\n  };\n\n  const filteredTemplates = templates.filter(template =>\n    template.title.toLowerCase().includes(searchTerm.toLowerCase()) &&\n    (selectedCategory === '' || template.category === selectedCategory)\n  );\n\n  const categories = Array.from(new Set(templates.map(t => t.category)));\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-3xl font-bold\">Prompt Templates</h2>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button><PlusCircle className=\"mr-2 h-4 w-4\" /> Create Template</Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[625px]\">\n            <DialogHeader>\n              <DialogTitle>Create New Prompt Template</DialogTitle>\n              <DialogDescription>\n                Create a new reusable prompt template.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"title\" className=\"text-right\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={newTemplate.title}\n                  onChange={(e) => setNewTemplate({ ...newTemplate, title: e.target.value })}\n                  className=\"col-span-3\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"description\" className=\"text-right\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newTemplate.description}\n                  onChange={(e) => setNewTemplate({ ...newTemplate, description: e.target.value })}\n                  className=\"col-span-3\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"content\" className=\"text-right\">Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={newTemplate.content}\n                  onChange={(e) => setNewTemplate({ ...newTemplate, content: e.target.value })}\n                  className=\"col-span-3\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"category\" className=\"text-right\">Category</Label>\n                <Input\n                  id=\"category\"\n                  value={newTemplate.category}\n                  onChange={(e) => setNewTemplate({ ...newTemplate, category: e.target.value })}\n                  className=\"col-span-3\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"tags\" className=\"text-right\">Tags</Label>\n                <Input\n                  id=\"tags\"\n                  value={newTemplate.tags.join(', ')}\n                  onChange={(e) => setNewTemplate({ ...newTemplate, tags: e.target.value.split(',').map(tag => tag.trim()) })}\n                  className=\"col-span-3\"\n                  placeholder=\"Enter tags separated by commas\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"submit\" onClick={handleCreateTemplate}>Create Template</Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n      <div className=\"flex space-x-4 mb-4\">\n        <div className=\"relative flex-grow\">\n          <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search templates...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-8\"\n          />\n        </div>\n        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Select category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"\">All Categories</SelectItem>\n            {categories.map((category) => (\n              <SelectItem key={category} value={category}>{category}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredTemplates.map((template) => (\n          <Card key={template.id}>\n            <CardHeader>\n              <CardTitle>{template.title}</CardTitle>\n              <CardDescription>{template.description}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-2\">Category: {template.category}</p>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {template.tags.map((tag, index) => (\n                  <span key={index} className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary text-primary-foreground\">\n                    <Tag className=\"mr-1 h-3 w-3\" />\n                    {tag}\n                  </span>\n                ))}\n              </div>\n              <p className=\"text-sm\">Version: {template.version}</p>\n              <p className=\"text-sm\">Rating: {template.rating}/5</p>\n              <p className=\"text-sm\">Usage Count: {template.usageCount}</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" className=\"w-full\">View Template</Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}"],["/home/project/.env","VITE_SUPABASE_URL=https://your-project-id.supabase.co\nVITE_SUPABASE_ANON_KEY=your-supabase-anon-key"],["/home/project/package.json","{\n  \"name\": \"ai-hub\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"^2.39.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.21.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.10.4\",\n    \"@types/react\": \"^18.2.45\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\n    \"@typescript-eslint/parser\": \"^6.14.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"eslint\": \"^8.55.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\n    \"postcss\": \"^8.4.32\",\n    \"tailwindcss\": \"^3.3.6\",\n    \"typescript\": \"^5.3.3\",\n    \"vite\": \"^5.0.8\"\n  }\n}"]]